Awesome — let’s build **Step 3: The Chat Tab for Attribution**, which includes:

1. Table preview from the input CSV
2. AI summary placeholder
3. Model selector & Clear Chat
4. Chat history view
5. Prompt input box + Send button

---

## ✅ Step 3: Chat Tab – HTML Layout

### 📄 In `attribution.component.html`

Replace this block:

```html
<div *ngIf="activeTab === 'chat'">
  <h3>Chat tab UI coming up next (based on your instructions)</h3>
</div>
```

With this:

```html
<div *ngIf="activeTab === 'chat'" class="chat-tab">
  <!-- 1. Table Preview -->
  <div class="chat-table-section">
    <h4>Attribution Table</h4>
    <div class="table-wrapper">
      <table>
        <thead>
          <tr>
            <th>Sector</th>
            <th>Port. Ctrb</th>
            <th>Bench. Ctrb</th>
            <th>Allocation</th>
            <th>Selection</th>
            <th>Total Mgmt</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let row of parsedChatTable">
            <td>{{ row.sector }}</td>
            <td>{{ row.portfolio }}</td>
            <td>{{ row.benchmark }}</td>
            <td>{{ row.allocation }}</td>
            <td>{{ row.selection }}</td>
            <td>{{ row.total }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- 2. AI Summary Placeholder -->
  <div class="summary-placeholder">
    <h4>AI Summary (Coming Soon)</h4>
    <p>This section will display AI-generated insights based on the table.</p>
  </div>

  <!-- 3. Controls -->
  <div class="chat-controls">
    <label>
      Model:
      <select [(ngModel)]="selectedChatModel">
        <option value="gemma:2b">Gemma:2B</option>
        <option value="llama:3">LLaMA 3</option>
      </select>
    </label>
    <button (click)="clearChat()">Clear Chat</button>
  </div>

  <!-- 4. Chat History -->
  <div class="chat-history">
    <div *ngFor="let msg of chatHistory" [ngClass]="msg.role">
      {{ msg.content }}
    </div>
  </div>

  <!-- 5. Chat Input -->
  <div class="chat-input-box">
    <textarea rows="2" [(ngModel)]="chatInput" placeholder="Ask something about this attribution data..."></textarea>
    <button (click)="sendMessage()">Send</button>
  </div>
</div>
```

---

## ✅ Step 3B: Add Supporting Logic in `attribution.component.ts`

Add this **new field and parser method**:

```ts
parsedChatTable: {
  sector: string;
  portfolio: string;
  benchmark: string;
  allocation: string;
  selection: string;
  total: string;
}[] = [];

ngOnInit(): void {
  this.parseAttributionData();
}

parseAttributionData() {
  const cleaned = this.attributionData.replace(/,,+/g, ',');
  const lines = cleaned.split('\n').filter(Boolean);

  this.parsedChatTable = lines.map(line => {
    const [sector, , , portCtrb, , , benchCtrb, , , , allocation, selection, total] = line.split(',');
    return {
      sector: sector?.trim() || '',
      portfolio: portCtrb?.trim() || '',
      benchmark: benchCtrb?.trim() || '',
      allocation: allocation?.trim() || '',
      selection: selection?.trim() || '',
      total: total?.trim() || ''
    };
  });
}
```

⚠️ Also update `switchTab()` to re-parse when opening chat:

```ts
switchTab(tab: 'commentary' | 'chat') {
  if (tab === 'chat' && !this.attributionData.trim()) {
    alert('Please enter attribution data before using chat.');
    return;
  }

  if (tab === 'chat') {
    this.parseAttributionData();
  }

  this.activeTab = tab;
}
```

---

## ✅ Step 3C: Chat Methods (Use same as before)

Add if not already:

```ts
sendMessage() {
  const content = this.chatInput.trim();
  if (!content) return;

  const userMessage: ChatMessage = {
    role: 'user',
    content
  };
  this.chatHistory.push(userMessage);
  this.chatInput = '';

  setTimeout(() => {
    this.chatHistory.push({
      role: 'assistant',
      content: `This is a dummy response based on your attribution table using ${this.selectedChatModel}.`
    });
  }, 600);
}

clearChat() {
  this.chatHistory = [];
}
```

---

## ✅ Step 3D: Add Styling in `attribution.component.scss`

Append:

```scss
.chat-tab {
  max-width: 800px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.chat-table-section {
  overflow-x: auto;

  table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95rem;

    th, td {
      padding: 0.5rem;
      border: 1px solid #ccc;
      text-align: left;
    }

    th {
      background-color: #f0f0f0;
    }
  }
}

.summary-placeholder {
  padding: 1rem;
  border-left: 4px solid #ccc;
  background: #fdfdfd;
  font-style: italic;
}

.chat-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;

  select, button {
    padding: 0.4rem 0.8rem;
    border-radius: 4px;
    border: 1px solid #aaa;
  }

  button {
    background: #888;
    color: white;
    border: none;

    &:hover {
      background: #555;
    }
  }
}

.chat-history {
  max-height: 250px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  background: #f6f6f6;
  padding: 1rem;
  border-radius: 6px;

  .user {
    align-self: flex-end;
    background: #d1eaff;
    padding: 0.6rem;
    border-radius: 12px 12px 0 12px;
    max-width: 75%;
  }

  .assistant {
    align-self: flex-start;
    background: #eee;
    padding: 0.6rem;
    border-radius: 12px 12px 12px 0;
    max-width: 75%;
  }
}

.chat-input-box {
  display: flex;
  gap: 1rem;

  textarea {
    flex: 1;
    padding: 0.6rem;
    resize: vertical;
    border: 1px solid #ccc;
    border-radius: 6px;
  }

  button {
    height: 100%;
    padding: 0.6rem 1.2rem;
    background-color: #0a74da;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;

    &:hover {
      background-color: #095bb5;
    }
  }
}
```

---

## ✅ Test It

* Switch to the **Chat with Data** tab after entering attribution input
* Table should render cleaned rows
* Model and Clear Chat should work
* Sending a message adds user + dummy assistant response

---

Let me know once you're happy with the chat tab — and we’ll do enhancements or backend integration next!
