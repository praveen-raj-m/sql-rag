<!-- Chat Tab -->
<div *ngIf="activeTab === 'chat'" class="chat-layout">
  <!-- Left Column: Comparison -->
  <div class="chat-left">
    <h4>Comparison</h4>
    <div class="doc-scroll">
      <pre>{{ agreementText }}</pre>
    </div>
  </div>

  <!-- Right Column: Chat -->
  <div class="chat-right">
    <div class="chat-controls">
      <select [(ngModel)]="llmModel">
        <option value="llama3">LLaMA 3</option>
        <option value="gemma3-12b">Gemma 3:12B</option>
        <option value="gemma3-27b">Gemma 3:27B</option>
      </select>
      <button (click)="clearChat()">Clear Chat</button>
    </div>

    <div class="chat-history">
      <div *ngFor="let msg of chatHistory" class="chat-message" [ngClass]="msg.role">
        <strong *ngIf="msg.role === 'user'">You:</strong>
        <strong *ngIf="msg.role === 'assistant'">AI:</strong>
        <span>{{ msg.content }}</span>
      </div>
    </div>

    <div class="chat-input-box">
      <input [(ngModel)]="chatInput" placeholder="Ask about the agreement..." />
      <button (click)="sendChat()">Send</button>
    </div>
  </div>
</div>



Perfect. Here's a summary of the **three tasks** with actions to complete each:

---

### ✅ 1. **SCSS Update** for Chat Tab (Rename Summary → Comparison)

In your `legaldoc.component.scss`, replace:

```scss
.summary-box {
  ...
}
```

with:

```scss
.comparison-box {
  font-size: 0.9rem;
  padding: 0.5rem 0.75rem;
  border-left: 3px solid #ccc;
  background-color: #fafafa;
  max-height: 100px;
  overflow-y: auto;
  white-space: pre-wrap;

  h4 {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
  }

  p {
    margin: 0;
    line-height: 1.2;
  }
}
```

And update the HTML if using the comparison box again later (optional).

---

### ✅ 2. Enable Download Button After Commentary is Generated

In `legaldoc.component.ts`, add a method to generate and download the doc:

```ts
downloadCommentaryAsDoc() {
  const header = `Legal Document Analysis\nAnalyst: ${this.analystName}\nDate: ${this.analysisDate}\n\n`;
  const input = `Template Document:\n${this.templateText}\n\nClient Agreement:\n${this.agreementText}\n\n`;
  const promptText = `Prompt:\n${this.prompt}\n\n`;
  const output = `LLM Commentary:\n${this.commentaryResult}\n\n---\n*This is an AI-generated commentary.*`;

  const fullText = header + input + promptText + output;

  const blob = new Blob([fullText], { type: 'application/msword' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  const safeDate = this.analysisDate.replaceAll('-', '');
  link.download = `${this.analystName}_${safeDate}_LLMCommentary.doc`;
  link.click();
}
```

Update the `Download Output` button in the HTML:

```html
<button
  [disabled]="isGenerating || !commentaryResult"
  (click)="downloadCommentaryAsDoc()">
  Download Output
</button>
```

---

### ✅ 3. Final Notes

* We already use `[disabled]="isGenerating || !commentaryResult"` for safe control.
* The doc includes template, agreement, prompt, and commentary with disclaimers.
* We added a `safeDate` to format the filename cleanly.

---

Let me know if you want to format the downloaded Word doc better (like with HTML → DOCX conversion) or keep this as plain `.doc`.
