Great â€” now that you have two full summaries (from agreement and template, both generated using Gemma 3:12B), the next step is to **compare them** and extract meaningful differences.

---

## âœ… Goal:

Create a Flask backend route that:

* Accepts:

  * `summary_1` (e.g., from agreement)
  * `summary_2` (e.g., from template)
  * Optional `model` and `temperature`
* Sends a **comparison prompt** to the local LLM (Ollama)
* Returns a **diff-style or bullet-style** comparison of what's missing, added, or altered

---

## ðŸ§  What the Comparison Should Cover:

* Differences in obligations, parties, terms
* Missing clauses in either
* Changed amounts, timelines, risks
* Clear explanation of whatâ€™s **unique** or **misaligned**

---

## âœ… Flask Backend: `routes/compare.py`

```python
from flask import Blueprint, request, jsonify
import requests

compare_bp = Blueprint('compare', __name__)

def build_comparison_prompt(summary1, summary2):
    return f"""
You are a legal compliance analyst.

You are given two legal agreement summaries. Your task is to **compare them and identify all key differences**.

Focus on:
- Obligations
- Payment terms
- Termination conditions
- Clauses added, removed, or changed
- Legal risks or liabilities introduced or omitted

Present your findings clearly in bullet points.

Use this format:
- Difference: <explanation>
  - Found in Summary 1: ...
  - Found in Summary 2: ...

Summaries:

Summary 1:
\"\"\"
{summary1}
\"\"\"

Summary 2:
\"\"\"
{summary2}
\"\"\"
"""

def call_llm(prompt, model="gemma:12b", temperature=0.2):
    response = requests.post(
        "http://localhost:11434/api/generate",
        json={
            "model": model,
            "prompt": prompt,
            "stream": False,
            "options": {
                "temperature": temperature
            }
        }
    )
    if response.status_code != 200:
        raise Exception(f"LLM error: {response.text}")
    return response.json()["response"]

@compare_bp.route('/compare-summaries', methods=['POST'])
def compare_summaries():
    try:
        data = request.json
        summary1 = data['summary_1']
        summary2 = data['summary_2']
        model = data.get('model', 'gemma:12b')
        temperature = float(data.get('temperature', 0.2))

        prompt = build_comparison_prompt(summary1, summary2)
        result = call_llm(prompt, model, temperature)

        return jsonify({
            "differences": result.strip()
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500
```

---

## âœ… Register This Route in `app.py`

```python
from routes.compare import compare_bp
app.register_blueprint(compare_bp, url_prefix='/api/compare')
```

---

## âœ… Sample Request Payload

```json
{
  "summary_1": "Agreement summary from Gemma 3:12B...",
  "summary_2": "Template summary from Gemma 3:12B...",
  "model": "gemma:12b",
  "temperature": 0.2
}
```

---

## âœ… Sample Output

```json
{
  "differences": "- Difference: Payment frequency changed\n  - Found in Summary 1: Quarterly payments due on the 15th.\n  - Found in Summary 2: Monthly payments without a fixed date.\n\n- Difference: Termination clause removed\n  - Found in Summary 1: Either party may terminate with 30 days notice.\n  - Found in Summary 2: No termination clause found."
}
```

---

Let me know if youâ€™d like to:

* Format response in **diff view** (e.g., added/removed markers)
* Return **structured JSON** per clause type (for side-by-side UI)
* Run comparison on full text instead of summaries (if needed later)

Want to test it with real examples next?
