Perfect! Letâ€™s begin by creating the **`TabSelectorComponent`**, since it's simple, reusable, and used on **every task page**.

---

## âœ… Step 1: Create `TabSelectorComponent`

From inside the `client/` folder, run:

```bash
ng generate component shared/components/tab-selector --standalone
```

---

## âœ… Step 2: Update `tab-selector.component.ts`

Open:
ðŸ“„ `src/app/shared/components/tab-selector/tab-selector.component.ts`

Replace with:

```ts
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  standalone: true,
  selector: 'app-tab-selector',
  imports: [CommonModule],
  templateUrl: './tab-selector.component.html',
  styleUrls: ['./tab-selector.component.scss']
})
export class TabSelectorComponent {
  @Input() activeTab: 'commentary' | 'chat' = 'commentary';
  @Output() tabChanged = new EventEmitter<'commentary' | 'chat'>();

  selectTab(tab: 'commentary' | 'chat') {
    this.tabChanged.emit(tab);
  }
}
```

---

## âœ… Step 3: Create Template

ðŸ“„ `tab-selector.component.html`

```html
<div class="tab-selector">
  <button [class.active]="activeTab === 'commentary'" (click)="selectTab('commentary')">
    Generate Commentary
  </button>
  <button [class.active]="activeTab === 'chat'" (click)="selectTab('chat')">
    Chat with Data
  </button>
</div>
```

---

## âœ… Step 4: Add Styles

ðŸ“„ `tab-selector.component.scss`

```scss
.tab-selector {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;

  button {
    padding: 0.75rem 1.5rem;
    border: none;
    background-color: #eee;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 600;
    transition: background-color 0.2s ease;

    &.active {
      background-color: #0a74da;
      color: white;
    }

    &:hover {
      background-color: #ccc;
    }
  }
}
```

---

## âœ… Step 5: Use in `drawdown.component.html`

Replace the manual tab buttons with:

```html
<app-tab-selector [activeTab]="activeTab" (tabChanged)="switchTab($event)" />
```

Now your `DrawdownComponent` handles tab switching, and the tab UI is cleanly abstracted.

---

Let me know when this is done â€” then weâ€™ll extract the **ChatWindowComponent** next!
