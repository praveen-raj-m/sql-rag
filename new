import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

// Inline interface for chat messages
interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
}

@Component({
  standalone: true,
  selector: 'app-drawdown',
  imports: [CommonModule, FormsModule],
  templateUrl: './drawdown.component.html',
  styleUrls: ['./drawdown.component.scss']
})
export class DrawdownComponent {
  // Tab Switching
  activeTab: 'commentary' | 'chat' = 'commentary';

  // Commentary Form
  inputData: string = '';
  promptText: string = '';
  temperature: number = 0.7;
  selectedModel: string = 'gemma:2b';
  renderedMarkdown: string = '';

  // Chat Tab
  chatInput: string = '';
  chatHistory: ChatMessage[] = [];
  selectedChatModel: string = 'gemma:2b';

  switchTab(tab: 'commentary' | 'chat') {
    if (tab === 'chat' && !this.inputData.trim()) {
      alert('Please enter input data in the commentary tab before using chat.');
      return;
    }
    this.activeTab = tab;
  }

  generatePrompt() {
    if (!this.inputData.trim()) {
      alert('Please enter drawdown input before generating a prompt.');
      return;
    }
    this.promptText = `Analyze the following drawdown data:\n\n${this.inputData}`;
  }

  generateCommentary() {
    if (!this.promptText.trim()) {
      alert('Please generate or write a prompt first.');
      return;
    }

    this.renderedMarkdown = `
## AI Commentary (Simulated)

Model: **${this.selectedModel}**  
Temperature: **${this.temperature}**

---

> This is a *dummy markdown* response. Backend integration will replace this.
    `;
  }

  downloadPrompt() {
    if (!this.promptText.trim()) return;

    const blob = new Blob([this.promptText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'prompt.txt';
    a.click();
    window.URL.revokeObjectURL(url);
  }

  sendMessage() {
    const content = this.chatInput.trim();
    if (!content) return;

    const userMessage: ChatMessage = {
      role: 'user',
      content
    };
    this.chatHistory.push(userMessage);
    this.chatInput = '';

    // Simulate assistant response
    setTimeout(() => {
      this.chatHistory.push({
        role: 'assistant',
        content: `This is a dummy response from model: ${this.selectedChatModel}`
      });
    }, 600);
  }

  clearChat() {
    this.chatHistory = [];
  }
}
