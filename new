Perfect — that’s a great UX improvement. Let’s **restructure the Chat tab layout** so the user can:

* See the **table on the left**
* See the **AI summary + chat interface on the right**
* Keep both panels **fixed-height and independently scrollable**
* Allow user to type while viewing the table and commentary

---

## ✅ Updated Layout Plan

```
+------------------+-----------------------------+
|                  |                             |
|  Attribution     |   Summary Placeholder       |
|  Table (left)    |   Chat History              |
|  Fixed Width     |   Prompt Input + Send       |
|  Scrollable      |   Model Dropdown, Clear     |
+------------------+-----------------------------+
```

---

## ✅ Step 1: Updated HTML

Replace your existing `chat-tab` HTML block in `attribution.component.html` with:

```html
<div class="chat-tab-grid">
  <!-- Left: Table View -->
  <div class="chat-left">
    <h4>Attribution Table</h4>
    <div class="table-scroll">
      <table>
        <thead>
          <tr>
            <th>Sector</th>
            <th>Port. Ctrb</th>
            <th>Bench. Ctrb</th>
            <th>Allocation</th>
            <th>Selection</th>
            <th>Total Mgmt</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let row of parsedChatTable">
            <td>{{ row.sector }}</td>
            <td>{{ row.portfolio }}</td>
            <td>{{ row.benchmark }}</td>
            <td>{{ row.allocation }}</td>
            <td>{{ row.selection }}</td>
            <td>{{ row.total }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Right: Chat UI -->
  <div class="chat-right">
    <div class="summary-placeholder">
      <h4>AI Summary (Coming Soon)</h4>
      <p>This section will display AI-generated insights based on the table.</p>
    </div>

    <div class="chat-controls">
      <label>
        Model:
        <select [(ngModel)]="selectedChatModel">
          <option value="gemma:2b">Gemma:2B</option>
          <option value="llama:3">LLaMA 3</option>
        </select>
      </label>
      <button (click)="clearChat()">Clear Chat</button>
    </div>

    <div class="chat-history">
      <div *ngFor="let msg of chatHistory" [ngClass]="msg.role">
        {{ msg.content }}
      </div>
    </div>

    <div class="chat-input-box">
      <textarea rows="2" [(ngModel)]="chatInput" placeholder="Ask something..."></textarea>
      <button (click)="sendMessage()">Send</button>
    </div>
  </div>
</div>
```

---

## ✅ Step 2: Update Styles in `attribution.component.scss`

Append or update:

```scss
.chat-tab-grid {
  display: flex;
  max-height: 600px;
  border-top: 1px solid #ccc;
  padding-top: 1rem;
  gap: 1.5rem;
  margin: 0 auto;
}

.chat-left,
.chat-right {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  overflow: hidden;
}

.chat-left {
  max-width: 400px;

  .table-scroll {
    overflow-y: auto;
    max-height: 550px;

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 0.85rem;

      th, td {
        padding: 0.4rem;
        border: 1px solid #ccc;
        text-align: left;
      }

      th {
        background-color: #f2f2f2;
        position: sticky;
        top: 0;
      }
    }
  }
}

.chat-right {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  overflow: hidden;

  .summary-placeholder {
    font-size: 0.9rem;
    padding: 0.75rem;
    border-left: 3px solid #ccc;
    background-color: #fafafa;
  }

  .chat-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;

    select, button {
      padding: 0.4rem 0.6rem;
      border-radius: 4px;
      border: 1px solid #aaa;
    }

    button {
      background: #888;
      color: white;

      &:hover {
        background: #555;
      }
    }
  }

  .chat-history {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    background: #f8f8f8;
    border-radius: 6px;

    .user {
      align-self: flex-end;
      background: #d1eaff;
      padding: 0.5rem;
      border-radius: 12px 12px 0 12px;
      max-width: 75%;
      margin-bottom: 0.5rem;
    }

    .assistant {
      align-self: flex-start;
      background: #eee;
      padding: 0.5rem;
      border-radius: 12px 12px 12px 0;
      max-width: 75%;
      margin-bottom: 0.5rem;
    }
  }

  .chat-input-box {
    display: flex;
    gap: 1rem;

    textarea {
      flex: 1;
      padding: 0.5rem;
      border-radius: 6px;
      border: 1px solid #ccc;
    }

    button {
      padding: 0.5rem 1rem;
      background-color: #0a74da;
      color: white;
      border: none;
      border-radius: 6px;

      &:hover {
        background-color: #095bb5;
      }
    }
  }
}
```

---

## ✅ Final Experience

* **Left panel**: Fixed-width attribution table (scrollable if long)
* **Right panel**: AI summary, model selector, chat history, and input
* Entire layout is responsive and fits within \~600px height

---

Let me know when it’s working — we can then:

* Hook this into real backend
* Apply similar UI to other pages
* Add markdown rendering, skeleton loaders, etc.
