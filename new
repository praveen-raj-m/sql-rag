import csv
import io
import json

def generate_attribution_prompt(csv_data: str, analyst_name: str, analysis_date: str):
    headers = [
        "sector", "portfolio_avg_weight", "portfolio_total_return", "portfolio_weighted_contribution",
        "benchmark_avg_weight", "benchmark_total_return", "benchmark_weighted_contribution",
        "variance_avg_weight", "variance_total_return", "variance_weighted_contribution",
        "allocation", "selection", "total_management"
    ]

    # Parse the CSV from the string
    csv_lines = csv_data.strip().splitlines()
    reader = csv.reader(csv_lines)

    rows = []
    for row in reader:
        if len(row) != 13:
            continue  # Skip malformed lines
        cleaned = [col.strip() for col in row]
        parsed = {
            headers[i]: cleaned[i] if i == 0 else float(cleaned[i])
            for i in range(13)
        }
        rows.append(parsed)

    # Separate total row
    total_row = next((r for r in rows if r['sector'].strip().lower() == 'total'), None)
    rows = [r for r in rows if r['sector'].strip().lower() != 'total']

    # Sort by total_management
    rows_sorted = sorted(rows, key=lambda x: x['total_management'], reverse=True)

    # Tag top and bottom 3 sectors
    for i, r in enumerate(rows_sorted):
        if i < 3:
            r['tag'] = f'top_{i+1}'
        elif i >= len(rows_sorted) - 3:
            r['tag'] = f'bottom_{len(rows_sorted) - i}'

    # Append total row at the end without tags
    if total_row:
        rows_sorted.append(total_row)

    # Create a pretty JSON string for LLM input
    json_data = json.dumps(rows_sorted, indent=2)

    # Build the final prompt
    analyst_line = f"Analyst: {analyst_name}\n" if analyst_name else ""
    date_line = f"Date: {analysis_date}\n" if analysis_date else ""

    prompt = (
        f"{analyst_line}{date_line}"
        "You are a financial analyst. Analyze the following performance attribution data.\n"
        "Pay special attention to sectors tagged as top or bottom performers based on total_management score.\n"
        "Write a 250â€“300 word client-facing commentary that explains the key drivers of performance, referencing specific numbers.\n\n"
        "Data:\n"
        f"{json_data}"
    )

    return prompt
