Perfect — this step will give your users a **clean, cohesive final summary** that reads like a polished executive brief, instead of a stitched-together bullet dump.

Let’s refine the pipeline by **adding a final LLM pass** after chunk-wise summaries are generated.

---

## ✅ Updated Pipeline:

1. ✅ **Chunk** document by paragraph (as we already do)
2. ✅ For each chunk:

   * Summarize with traceable prompt
   * Collect bullet points
3. ✅ **Concatenate all bullet summaries**
4. ✅ Send to LLM again:

   * "Write a clean, concise, structured legal summary"
   * Output: 1–2 paragraph executive summary
5. ✅ Return:

   * `raw_bullets`: full reference summary
   * `clean_summary`: final clean version

---

## ✅ Updated Flask Route (Final Pass Included)

Update your `/summarize` route in `routes/summary.py`:

```python
@summary_bp.route('/summarize', methods=['POST'])
def summarize_document():
    try:
        data = request.json
        full_text = data['text']
        model = data.get('model', 'gemma:7b')
        temperature = float(data.get('temperature', 0.2))

        chunks = chunk_by_paragraphs(full_text)
        all_bullets = []

        for ref, chunk in chunks:
            prompt = build_prompt(ref, chunk)
            result = call_local_llm(model, temperature, prompt)
            all_bullets.append(f"📌 **{ref}**\n{result.strip()}\n")

        combined_summary = "\n\n".join(all_bullets)

        # Final cleanup prompt
        cleanup_prompt = f"""
You are a legal analyst. Given the following bullet-point summaries from various sections of a legal agreement, generate a clear and concise executive summary.

Summarize the full agreement, highlight key points such as parties, obligations, timelines, payment terms, legal risks, and termination clauses.

Avoid repeating references or headings. Keep the tone formal and professional.

Summaries:
\"\"\"
{combined_summary}
\"\"\"
"""

        final_summary = call_local_llm(model, temperature, cleanup_prompt)

        return jsonify({
            "raw_bullets": combined_summary,
            "clean_summary": final_summary.strip()
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500
```

---

## ✅ Result Format

```json
{
  "raw_bullets": "📌 Lines 0–50\n- ...",
  "clean_summary": "This agreement outlines a service relationship between Alpha Inc. and Beta Corp. The agreement requires..."
}
```

---

## ✅ Bonus Ideas (Optional)

* Return both summaries to UI: one collapsible “raw view” + one “clean executive view”
* Allow users to **export** both to Word/PDF
* For long clean summaries, split into sections (like “Termination Summary”, “Payment Summary”)

---

Let me know if you'd like help:

* Sending this to Angular frontend
* Structuring the final summary into JSON
* Repeating this flow for the **template document** next

Ready when you are.




Excellent — if we want the **final cleaned summary to still mention references** (like `Lines 500–700` or `Section: Termination`), we need to strike a balance between:

* ✨ **Readable, polished output**
* 📌 **Traceability** (so the user knows where each insight came from)

---

## ✅ Updated Design Goal

Return a **structured summary** that:

* Groups findings by legal topics (e.g., Parties, Payment Terms, Termination)
* Mentions references like `Lines X–Y` subtly in the output
* Is readable enough for a lawyer or client to use directly

---

## ✅ What Changes?

We will update the **final LLM cleanup prompt** to *preserve references* while still producing a clean narrative.

---

## ✅ Final Cleanup Prompt (with references)

Update this part in your `/summarize` route:

```python
        cleanup_prompt = f"""
You are a legal analyst. Given the following bullet-point summaries from a legal agreement, write a structured, formal executive summary.

Group related points into categories such as:
- Parties Involved
- Agreement Dates
- Obligations
- Payment Terms
- Termination Clauses
- Governing Law
- Risks and Limitations

For each point, include the reference line(s) where it came from, such as “(Lines 120–150)”.

Avoid repeating headings. Present it clearly and professionally, but preserve references for legal traceability.

Summaries:
\"\"\"
{combined_summary}
\"\"\"
"""
```

---

## ✅ Example Output

```text
Parties Involved:
- This agreement is made between Alpha Corp. and Beta LLC. (Lines 1–45)

Payment Terms:
- Payments are due quarterly by the 15th of each month. Late payments incur a 5% penalty. (Lines 120–150)

Termination Clauses:
- Either party may terminate the agreement with 30 days written notice under defined breach conditions. (Lines 300–350)
```

---

## ✅ Final API Response

Keep the response JSON like this:

```json
{
  "raw_bullets": "...",           // All traceable bullet points per chunk
  "clean_summary": "...",         // Clean, readable but still traceable
  "model_used": "gemma:7b"
}
```

---

## ✅ Final Touch

If you’d prefer the clean summary as **structured JSON** (e.g., keys like `"termination"`, `"payment_terms"`), I can also format that way — useful for UI filtering or clause search.

Would you like to structure the final summary like that as well? Or just keep it formatted text with references?
